import React, { Component } from 'react';
import {
    Text,
    View,
    TouchableOpacity,
    Keyboard,
    Image,
    ScrollView,
    AsyncStorage,
    FlatList,

} from 'react-native';


import { fontSize, color, fontFamily, width, height } from '../../Asset/NeetStyles/fontsAndColors';
import Button from '../../Asset/Libraries/Button';
import { wp, hp } from '../../Asset/Libraries/ResponsiveScreen';
import { debounce, Snackbar, Icon, moment, ModalPicker, connect, DateTimePicker } from '../../Asset/Libraries/NpmList';
import { Header_Only_Drawer } from '../../Asset/Libraries/index'

import { ReportChapterTestAction } from './../../Redux/Actions/ReportChapterTestAction';
import { DropdownChaptersAction } from './../../Redux/Actions/DropdownChaptersAction';
import { AllSummaryReportAction } from './../../Redux/Actions/AllSummaryReportAction';


class ChapterTest_Reports extends Component {
    constructor() {
        console.disableYellowBox = true;
        Keyboard.dismiss()
        super();
        this.state = {
            onReportResultView: false,
            isDateTimePickerVisible: false,
            isToDateTimePickerVisible: false,
            FromDate: '',
            ToDate: '',
            subjectId: '',
            chapterId: '',
            chapterNameVisble: false,
            onSelectReportColor: -1,
            Summary_ID: "",
            token: '',
            ToDate_Maximum: 0

        }

        this.onSubmit = debounce(this.onSubmit.bind(this), 1000, {
            leading: true,
            trailing: false,
        });
        this.onViewSummary = debounce(this.onViewSummary.bind(this), 1000, {
            leading: true,
            trailing: false,
        });

    }

    componentWillMount() {
        AsyncStorage.getItem("Token", (error, Token) => {
            if (Token) {
                this.setState({
                    token: Token
                })
            }
        })
    }


    onSubmit() {
        if (this.state.FromDate == "") {
            Snackbar.show({
                title: "From Date is Required",
                duration: Snackbar.LENGTH_SHORT
            });
        } else if (this.state.ToDate == "") {
            Snackbar.show({
                title: "To Date is Required",
                duration: Snackbar.LENGTH_SHORT
            });
        } else {
            this.props.ReportChapterTestAction(this.state.token, this.state.FromDate, this.state.ToDate, this.state.chapterId, this.state.subjectId)
            this.setState({ onReportResultView: true })
        }
    }

    onChapeterDetail(SubjectId) {

        this.props.DropdownChaptersAction(this.state.token, SubjectId)

        this.setState({ chapterNameVisble: true, subjectId: SubjectId })
    }

    onViewSummary() {

        // TypeId =>1 Chapter
        // TypeId =>2 Subject
        // TypeId =>3 Assessment
        // TypeId =>4 Neet
        // TypeId =>5 Special 


        this.props.AllSummaryReportAction(this.state.token, this.state.Summary_ID, "1")

    }

    onSelectReport(index) {
        if (this.state.onSelectReportColor == index) {
            this.setState({ onSelectReportColor: index, })
        } else {
            this.setState({ onSelectReportColor: index })
        }

        this.setState({ Summary_ID: index })
    }


    //-----------------------------Date Picker----------------------
    _showDateTimePicker() { this.setState({ isDateTimePickerVisible: true }); }

    _showToDateTimePicker() {
        this.setState({ isToDateTimePickerVisible: true });
    }

    _hideDateTimePicker = () => this.setState({
        isDateTimePickerVisible: false,
        isToDateTimePickerVisible: false,
    });

    _handleFromDatePicked = (fromDate) => {
        this.setState({ ToDate_Maximum: fromDate })
        this.setState({ FromDate: moment(fromDate).format('YYYY-MM-DD') })
        this._hideDateTimePicker();
    };
    _handleToDatePicked = (ToDate) => {
        this.setState({ ToDate: moment(ToDate).format('YYYY-MM-DD') })
        this.setState({ isToDateTimePickerVisible: false });
    };


    _VAlidationToDateTimePicker() {
        Snackbar.show({
            title: "From Date is Required",
            duration: Snackbar.LENGTH_SHORT
        });
    }

    render() {

        const { subjectList, chapterList, chapterReportDetail } = this.props.NeetReducer

        return (

            <View style={{ flex: 1, backgroundColor: color.white, }}>

                <Header_Only_Drawer onPressLeftIcon={() => this.props.navigation.navigate('DrawerOpen')} HeaderText='Chapter Test Reports' />

                <View style={{ height: hp('28%'), justifyContent: 'center', marginLeft: wp('5%'), marginRight: wp('5%'), marginTop: hp('2%'), borderRadius: wp('3%'), borderColor: color.lightGray, borderWidth: hp('0.15%'), }}>
                    <View style={{ height: hp('7%'), flexDirection: 'row', justifyContent: 'center', marginLeft: wp('5%'), marginRight: wp('5%'), }}>
                        <TouchableOpacity onPress={() => this._showDateTimePicker()} style={{ flex: 4.6, flexDirection: 'row', justifyContent: 'center', borderBottomColor: color.lightGray, borderBottomWidth: hp('0.1%') }}>
                            <View style={{ flex: 0.8, justifyContent: 'center' }}>
                                <Text style={{ color: this.state.FromDate == "" ? color.lightGray : color.black, fontSize: fontSize.Small, fontFamily: fontFamily.OpenSansRegular, backgroundColor: 'transparent', }}>{this.state.FromDate == "" ? "From Date" : this.state.FromDate}</Text>
                                <DateTimePicker
                                    mode='date'
                                    //for one day -> 86400000 , 6570 -> 18 yrs
                                    maximumDate={new Date}
                                    //for one day -> 86400000 , 36525 -> 100 yrs
                                    // minimumDate={new Date(new Date().getTime() - (86400000 * 36525))}
                                    isVisible={this.state.isDateTimePickerVisible}
                                    onConfirm={this._handleFromDatePicked}
                                    onCancel={this._hideDateTimePicker}
                                />
                            </View>
                            <View style={{ flex: 0.2, justifyContent: 'center', alignItems: 'center' }}>
                                <Image source={require('./../../Asset/Icons/checklist.png')} style={{ height: hp('3%'), width: hp('3%'), tintColor: color.appGreen }} ></Image>
                            </View>
                        </TouchableOpacity>
                        <View style={{ flex: 0.8, justifyContent: 'center' }}></View>
                        {
                            this.state.FromDate == "" ?

                                <TouchableOpacity onPress={() => this._VAlidationToDateTimePicker()} style={{ flex: 4.6, flexDirection: 'row', justifyContent: 'center', borderBottomColor: color.lightGray, borderBottomWidth: hp('0.1%') }}>
                                    <View style={{ flex: 0.8, justifyContent: 'center' }}>
                                        <Text style={{ color: this.state.ToDate == "" ? color.lightGray : color.black, fontSize: fontSize.Small, fontFamily: fontFamily.OpenSansRegular, backgroundColor: 'transparent', }}>{this.state.ToDate == "" ? "To Date" : this.state.ToDate}</Text>
                                        <DateTimePicker
                                            //for one day -> 86400000 , 6570 -> 18 yrs
                                            maximumDate={this.state.ToDate_Maximum}
                                            //for one day -> 86400000 , 36525 -> 100 yrs
                                            // minimumDate={new Date(new Date().getTime() - (86400000 * 36525))}
                                            isVisible={this.state.isToDateTimePickerVisible}
                                            onConfirm={this._handleToDatePicked}
                                            onCancel={this._hideDateTimePicker}
                                        />
                                    </View>
                                    <View style={{ flex: 0.2, justifyContent: 'center', alignItems: 'center' }}>
                                        <Image source={require('./../../Asset/Icons/checklist.png')} style={{ height: hp('3%'), width: hp('3%'), tintColor: color.appGreen }} ></Image>
                                    </View>
                                </TouchableOpacity>
                                :
                                <TouchableOpacity onPress={() => this._showToDateTimePicker()} style={{ flex: 4.6, flexDirection: 'row', justifyContent: 'center', borderBottomColor: color.lightGray, borderBottomWidth: hp('0.1%') }}>
                                    <View style={{ flex: 0.8, justifyContent: 'center' }}>
                                        <Text style={{ color: this.state.ToDate == "" ? color.lightGray : color.black, fontSize: fontSize.Small, fontFamily: fontFamily.OpenSansRegular, backgroundColor: 'transparent', }}>{this.state.ToDate == "" ? "To Date" : this.state.ToDate}</Text>
                                        <DateTimePicker
                                            //for one day -> 86400000 , 6570 -> 18 yrs
                                            // maximumDate={this.state.ToDate_Maximum}
                                            minimumDate={this.state.ToDate_Maximum}
                                            //for one day -> 86400000 , 36525 -> 100 yrs
                                            maximumDate={new Date}
                                            isVisible={this.state.isToDateTimePickerVisible}
                                            onConfirm={this._handleToDatePicked}
                                            onCancel={this._hideDateTimePicker}
                                        />
                                    </View>
                                    <View style={{ flex: 0.2, justifyContent: 'center', alignItems: 'center' }}>
                                        <Image source={require('./../../Asset/Icons/checklist.png')} style={{ height: hp('3%'), width: hp('3%'), tintColor: color.appGreen }} ></Image>
                                    </View>
                                </TouchableOpacity>
                        }
                    </View>

                    <View style={{ height: hp('7%'), justifyContent: 'center', flexDirection: 'row', marginLeft: wp('5%'), marginRight: wp('5%'), borderBottomColor: color.lightGray, borderBottomWidth: hp('0.1%') }}>
                        <View style={{ flex: 0.15, justifyContent: 'center', }}>
                            <Image source={require('../../Asset/Icons/books-stack-of-three.png')} style={{ height: wp('6%'), width: wp('6%'), tintColor: color.lightGray }} />
                        </View>
                        <View style={{ flex: 0.85, justifyContent: 'center' }}>
                            <ModalPicker
                                data={subjectList}
                                initValue={"Subject Name"}
                                optionStyle={{ paddingTop: hp('2%'), borderBottomWidth: 1, borderBottomColor: '#ccc', justifyContent: 'center', }}

                                cancelContainer={{ borderRadius: 0, width: width, top: (height - height / 100 * 75) / 2 }}
                                cancelStyle={{ justifyContent: 'center', alignItems: 'center' }}
                                cancelTextStyle={{ fontSize: fontSize.Medium, fontFamily: 'OpenSans-Regular', letterSpacing: width / 100 * 0.15, color: '#fff', }}

                                overlayStyle={{ width: width, height: height, backgroundColor: 'rgba(0,0,0,0.7)', justifyContent: 'center' }}
                                optionTextStyle={{ fontSize: fontSize.Small, padding: width / 100 * 0.5, color: '#393939', fontFamily: 'OpenSans-Regular', letterSpacing: width / 100 * 0.15 }}

                                sectionStyle={{ borderBottomWidth: 1, borderBottomColor: '#ccc', justifyContent: 'center' }}
                                sectionTextStyle={{ fontSize: fontSize.Small, color: '#393939', fontFamily: 'OpenSans-Regular', letterSpacing: width / 100 * 0.15 }}
                                selectTextStyle={{ color: this.state.subjectId == "" ? color.lightGray : color.black, fontSize: fontSize.Small, fontFamily: 'OpenSans-Regular', letterSpacing: width / 100 * 0.15 }}
                                selectStyle={{ height: height / 100 * 5, flex: 0, borderColor: '#fff', justifyContent: 'center', borderWidth: 0, padding: 0, borderRadius: 0 }}
                                onChange={(option) => { this.onChapeterDetail(option.SubjectId) }}
                            />
                        </View>
                    </View>

                    {this.state.chapterNameVisble == false ? null :
                        <View style={{ height: hp('7%'), justifyContent: 'center', flexDirection: 'row', marginLeft: wp('5%'), marginRight: wp('5%'), borderBottomColor: color.lightGray, borderBottomWidth: hp('0.1%') }}>

                            <View style={{ flex: 0.15, justifyContent: 'center', }}>
                                <Image source={require('../../Asset/Icons/open-magazine.png')} style={{ height: wp('6%'), width: wp('6%'), tintColor: color.lightGray }} />
                            </View>
                            <View style={{ flex: 0.85, justifyContent: 'center' }}>
                                <ModalPicker
                                    data={chapterList}
                                    initValue={"Select chapter name"}
                                    optionStyle={{ paddingTop: height / 100 * 2, borderBottomWidth: 1, borderBottomColor: '#ccc', justifyContent: 'center', }}

                                    cancelContainer={{ borderRadius: 0, width: width, top: (height - height / 100 * 75) / 2 }}
                                    cancelStyle={{ justifyContent: 'center', alignItems: 'center' }}
                                    cancelTextStyle={{ fontSize: fontSize.Medium, fontFamily: 'OpenSans-Regular', letterSpacing: width / 100 * 0.15, color: '#fff', }}

                                    overlayStyle={{ width: width, height: height, backgroundColor: 'rgba(0,0,0,0.7)', justifyContent: 'center' }}
                                    optionTextStyle={{ fontSize: fontSize.Small, padding: width / 100 * 0.5, color: '#393939', fontFamily: 'OpenSans-Regular', letterSpacing: width / 100 * 0.15 }}

                                    sectionStyle={{ borderBottomWidth: 1, borderBottomColor: '#ccc', justifyContent: 'center' }}
                                    sectionTextStyle={{ fontSize: fontSize.Small, color: '#393939', fontFamily: 'OpenSans-Regular', letterSpacing: width / 100 * 0.15 }}
                                    selectTextStyle={{ color: this.state.chapterId == "" ? color.lightGray : color.black, fontSize: fontSize.Small, fontFamily: 'OpenSans-Regular', letterSpacing: width / 100 * 0.15 }}
                                    selectStyle={{ height: height / 100 * 5, flex: 0, borderColor: '#fff', justifyContent: 'center', borderWidth: 0, padding: 0, borderRadius: 0 }}
                                    onChange={(option) => { this.setState({ chapterId: option.ChapterId }) }}
                                />
                            </View>
                        </View>}

                    <View style={{ height: hp('7%'), justifyContent: 'center' }}></View>
                </View>
                <View style={{ height: hp('4%'), width: wp('68%'), alignSelf: 'center', zIndex: 1000, position: 'absolute', top: hp('36'), right: wp('15%') }}>
                    <Button OnButtonClicked={() => this.props.skipDebounce ? this.props.onSubmit : this.onSubmit()} ButtonText='Submit' />
                </View>
                {this.state.onReportResultView == false ?
                    <View style={{ height: hp('50%'), marginLeft: wp('5%'), marginRight: wp('5%'), borderWidth: hp('0.1%'), borderColor: color.lightGray, marginTop: hp('5%'), borderRadius: wp('3%'), backgroundColor: '#ebebeb' }}>
                        <View style={{ height: hp('30%'), justifyContent: 'flex-end', alignItems: 'center' }}>
                            <Image source={require('./../../Asset/Icons/checklist.png')} style={{ height: hp('15%'), width: hp('15%'), tintColor: color.lightGray }} />
                        </View>
                        <View style={{ height: hp('6%'), justifyContent: 'center', alignItems: 'center' }}>
                            <Text style={{ color: color.lightGray, fontSize: fontSize.Small, fontFamily: fontFamily.OpenSansRegular }}>Get Your Chapter Reports</Text>
                        </View>
                        <View style={{ height: hp('14%'), justifyContent: 'center' }}></View>
                    </View>
                    :
                    <View>
                        <View style={{ height: hp('40%'), marginLeft: wp('5%'), marginRight: wp('5%'), borderWidth: hp('0.1%'), borderColor: color.lightGray, marginTop: hp('5%'), borderRadius: wp('3%'), }}>
                            <View style={{ height: hp('6%'), flexDirection: 'row', borderBottomWidth: wp('0.2%'), borderBottomColor: color.lightGray, backgroundColor: '#ebebeb', borderTopLeftRadius: wp('3%'), borderTopRightRadius: wp('3%') }}>
                                <View style={{ flex: 1.1, justifyContent: 'center', alignItems: 'center' }}>
                                    <Text style={{ fontSize: fontSize.verySmall, fontFamily: fontFamily.OpenSansBold, textAlign: 'center', color: color.lightGray }}>S.No</Text>
                                </View>
                                <View style={{ flex: 2.2, justifyContent: 'center' }}>
                                    <Text style={{ fontSize: fontSize.verySmall, fontFamily: fontFamily.OpenSansBold, textAlign: 'center', color: color.lightGray }}>Date</Text>
                                </View>
                                <View style={{ flex: 2.1, justifyContent: 'center' }}>
                                    <Text style={{ fontSize: fontSize.verySmall, fontFamily: fontFamily.OpenSansBold, textAlign: 'center', color: color.lightGray }}>Subject</Text>
                                </View>
                                <View style={{ flex: 2.2, justifyContent: 'center' }}>
                                    <Text style={{ fontSize: fontSize.verySmall, fontFamily: fontFamily.OpenSansBold, textAlign: 'center', color: color.lightGray }}>Chapter</Text>
                                </View>
                                <View style={{ flex: 2.4, justifyContent: 'center' }}>
                                    <Text style={{ fontSize: fontSize.verySmall, fontFamily: fontFamily.OpenSansBold, textAlign: 'center', color: color.lightGray }}>Test Name</Text>
                                </View>
                            </View>
                            <View style={{ flex: 1 }}>
                                <ScrollView showsVerticalScrollIndicator={false}>
                                    <FlatList style={{ flex: 1 }}
                                        data={chapterReportDetail}
                                        keyExtractor={(item, index) => item.key}
                                        renderItem={({ item, index }) =>
                                            <View style={{ flex: 1 }}>
                                                <TouchableOpacity onPress={() => this.onSelectReport(item.TestId, item)} style={{ height: hp('6%'), flexDirection: 'row' }}>
                                                    <View style={{ flex: 1.1, justifyContent: 'center', }}>
                                                        <Text style={{ fontSize: hp('1.8%'), fontFamily: fontFamily.OpenSansBold, color: this.state.onSelectReportColor !== item.TestId ? color.lightGray : color.black, textAlign: 'center' }}>{item.TestId}</Text>
                                                    </View>
                                                    <View style={{ flex: 2.2, justifyContent: 'center' }}>
                                                        <Text style={{ fontSize: hp('1.8%'), fontFamily: fontFamily.OpenSansBold, color: this.state.onSelectReportColor !== item.TestId ? color.lightGray : color.black, textAlign: 'center' }}>{moment(Date(item.TestDate)).format('DD-MM-YYYY')}</Text>
                                                    </View>
                                                    <View style={{ flex: 2.1, justifyContent: 'center' }}>
                                                        <Text style={{ fontSize: hp('1.8%'), fontFamily: fontFamily.OpenSansBold, color: this.state.onSelectReportColor !== item.TestId ? color.lightGray : color.black, textAlign: 'center' }}>{item.SubjectName}</Text>
                                                    </View>
                                                    <View style={{ flex: 2.2, justifyContent: 'center' }}>
                                                        <Text style={{ fontSize: hp('1.8%'), fontFamily: fontFamily.OpenSansBold, color: this.state.onSelectReportColor !== item.TestId ? color.lightGray : color.black, textAlign: 'center' }}>{item.ChapterName}</Text>
                                                    </View>
                                                    <View style={{ flex: 2.4, justifyContent: 'center' }}>
                                                        <Text style={{ fontSize: hp('1.8%'), fontFamily: fontFamily.OpenSansBold, color: this.state.onSelectReportColor !== item.TestId ? color.lightGray : color.black, textAlign: 'center' }}>{item.TestName}</Text>
                                                    </View>
                                                </TouchableOpacity>
                                            </View>}
                                    />
                                </ScrollView>

                            </View>
                        </View>

                        {this.state.onSelectReportColor == -1 ?
                            <View>
                                <View style={{ height: hp('2%') }} />
                                <View style={{ height: hp('7%'), justifyContent: 'center', alignItems: 'center', backgroundColor: color.lightGray, borderRadius: hp("3.5"), marginLeft: wp('10%'), marginRight: wp('10%') }}>
                                    <Text style={{ fontSize: fontSize.lightMedium, color: color.white, fontFamily: fontFamily.OpenSansSemiBold }}>View Summary</Text>
                                </View>
                                <View style={{ height: hp('2%') }} />
                            </View>
                            :
                            <View>
                                <View style={{ height: hp('2%') }} />
                                <Button OnButtonClicked={() => this.props.skipDebounce ? this.props.onViewSummary : this.onViewSummary()} ButtonText='View Summary' />
                                <View style={{ height: hp('2%') }} />
                            </View>
                        }

                    </View>
                }

            </View>


        );
    }
}

const mapStateToProps = (state) => {
    return {
        NeetReducer: state.NeetReducer
    };
}

const mapDispatchToProps = (dispatch) => {
    return {
        ReportChapterTestAction: (Token, FromDate, ToDate, ChapterId, SubjectId) => {
            dispatch(ReportChapterTestAction(Token, FromDate, ToDate, ChapterId, SubjectId));
        },
        DropdownChaptersAction: (Token, SubjectId) => {
            dispatch(DropdownChaptersAction(Token, SubjectId));
        },
        AllSummaryReportAction: (Token, Summary, TypeId) => {
            dispatch(AllSummaryReportAction(Token, Summary, TypeId));
        },


    }
}
export default connect(mapStateToProps, mapDispatchToProps)(ChapterTest_Reports);


