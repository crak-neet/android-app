import React, { Component } from 'react';
import {
    Text,
    View,
    TextInput,
    TouchableOpacity,
    TouchableWithoutFeedback,
    Keyboard,
    Image,
    Modal,
    ScrollView,
    Platform,
    AsyncStorage
} from 'react-native';

import { fontSize, color, fontFamily } from '../../Asset/NeetStyles/fontsAndColors';
import Button from '../../Asset/Libraries/Button';
import ButtonRed from '../../Asset/Libraries/ButtonRed';

import { wp, hp } from '../../Asset/Libraries/ResponsiveScreen';
import { debounce, Snackbar, Icon, connect, TimerCountdown, LinearGradient, Stopwatch, Timer, GridView } from '../../Asset/Libraries/NpmList';
import { Header_BackIcon } from '../../Asset/Libraries/index'
import { ImageQuestionAction } from './../../Redux/Actions/ImageQuestionAction';
import { ImageAnswerAction } from './../../Redux/Actions/ImageAnswerAction';
import { StartChapterTest_SaveAction } from './../../Redux/Actions/StartChapterTest_SaveAction';
import { AllCancelTest_Action } from './../../Redux/Actions/AllCancelTest_Action';
import { AllSkipList_Action } from './../../Redux/Actions/AllSkipList_Action';



class ChapterTest_Questions extends Component {
    constructor() {
        console.disableYellowBox = true;
        Keyboard.dismiss()
        super();
        this.state = {
            token: '',
            Question_ImageModel: false,
            SubmitModel: false,
            Option_ImageModel: false,
            CancelModel: false,
            onQuesChange: false,
            QuestionIndex: 0,
            LastQuestioninactive_Index: false,
            Option_ValueID: ''
        }
        this.backIconPress = debounce(this.backIconPress.bind(this), 1000, {
            leading: true,
            trailing: false,
        });
        this.onConfirmSubmit = debounce(this.onConfirmSubmit.bind(this), 1000, {
            leading: true,
            trailing: false,
        });
        this.onCancelQues = debounce(this.onCancelQues.bind(this), 1000, {
            leading: true,
            trailing: false,
        });
    }

    componentWillMount() {
        AsyncStorage.getItem("Token", (error, Token) => {
            if (Token) {
                this.setState({
                    token: Token
                })
            }
        })



        // if(id == ""){
        //     this.setState({
        //         QuestionIndex: id
        //     })
        // }
    }
    componentDidMount() {

    }
    backIconPress() {
        this.props.navigation.goBack()
    }

    onConfirmSubmit() {

        const { ChapterQuestions } = this.props.NeetReducer
        this.props.AllSkipList_Action(this.state.token, ChapterQuestions[this.state.QuestionIndex].TestDetailId)

      //  this.props.navigation.navigate("ChapterTest_Scorecard")
        this.onRequestClose()
    }

    OnQuesChange(tabRoute) {

        const { ChapterQuestions, SubjectId, ChapterId } = this.props.NeetReducer

        if (this.state.Option_ValueID != "") {
            fetch('http://139.59.42.219/api/question/submitchaptertest', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    "Token": this.state.token,
                    "TestDetailId": ChapterQuestions[this.state.QuestionIndex].TestDetailId,
                    "QuestionId": ChapterQuestions[this.state.QuestionIndex].QuestionId,
                    "AnswerId": this.state.Option_ValueID

                })
            })
                .then((response) => response.json())
                .then((JsonResponse) => {
                    if (JsonResponse.ResultStatus == "true") {
                        Snackbar.show({
                            title: JsonResponse.Message,
                            duration: Snackbar.LENGTH_SHORT
                        });
                        this.setState({
                            Option_ValueID: ""
                        })

                        this.props.StartChapterTest_SaveAction(this.state.token, SubjectId, ChapterId, ChapterQuestions[this.state.QuestionIndex].TestDetailId)
                    } else {


                    }
                })
                .catch((error) => {
                });
        }

        if (tabRoute == "Next") {
            if (ChapterQuestions.length - 2 == this.state.QuestionIndex) {
                Snackbar.show({
                    title: 'Last question',
                    duration: Snackbar.LENGTH_SHORT,
                });

                this.setState({
                    QuestionIndex: ++this.state.QuestionIndex, LastQuestioninactive_Index: true
                })
            } else {
                this.setState({
                    QuestionIndex: ++this.state.QuestionIndex, LastQuestioninactive_Index: false
                })
            }

        } else {
            if (this.state.QuestionIndex == 0) {
                Snackbar.show({
                    title: 'First question',
                    duration: Snackbar.LENGTH_SHORT,
                });
            } else {
                this.setState({
                    QuestionIndex: --this.state.QuestionIndex, LastQuestioninactive_Index: false
                })
            }
        }
    }

    Modelview_Method(Model_RouteName, QuestionId) {


        if (Model_RouteName == "Question_ImageModel") {
            this.setState({ Question_ImageModel: true, })
            this.props.ImageQuestionAction(this.state.token, QuestionId)

        } else if (Model_RouteName == "Option_ImageModel") {
            this.setState({ Option_ImageModel: true, })
            this.props.ImageAnswerAction(this.state.token, QuestionId)

        } else if (Model_RouteName == "SubmitModel") {
            this.setState({ SubmitModel: true, })


           // alert("Overall submit service needed")
        } else {
            this.setState({ CancelModel: true, })
        }
    }

    onCancelQues() {
        const { ChapterQuestions } = this.props.NeetReducer

        this.setState({ CancelModel: false, })

        this.props.AllCancelTest_Action(this.state.token, ChapterQuestions[this.state.QuestionIndex].TestDetailId)

    }

    onRequestClose() {
        this.setState({
            Question_ImageModel: false,
            Option_ImageModel: false,
            SubmitModel: false,
            CancelModel: false
        });
    }


    Option_Method(OptionId, QuestionOptions) {
        const { ChapterQuestions } = this.props.NeetReducer

        if (ChapterQuestions[this.state.QuestionIndex].Status == "true") {
            Snackbar.show({
                title: 'Already Answered',
                duration: Snackbar.LENGTH_SHORT,
            });
        } else {

            if (QuestionOptions.Status == "false") {
                QuestionOptions.Status = "true"

                this.setState({ Option_ValueID: OptionId });
            } else {
                QuestionOptions.Status = "false"
                this.setState({ Option_ValueID: "" });

            }
        }


    }


    render() {
        const { QuestionZoomImage, answerImageZoom, ChapterQuestions } = this.props.NeetReducer


        return (
            <View style={{ flex: 1, backgroundColor: "#F7F7F7", }}>
                <Header_BackIcon onPressLeftIcon={() => this.props.skipDebounce ? this.props.backIconPress : this.backIconPress()} HeaderText='Chapter Wise Test' />
                <View style={{ flex: 0.15, justifyContent: 'center', backgroundColor: color.white, elevation: wp("1%") }}>
                    <View style={{ flex: 1, marginLeft: wp('3%'), marginRight: wp('3%'), justifyContent: 'center' }}>
                        <View style={{ height: hp('6%'), justifyContent: 'center', flexDirection: 'row', borderBottomColor: color.lightGray, borderBottomWidth: wp('0.15%') }}>
                            <View style={{ flex: 0.65, flexDirection: 'row', justifyContent: 'center' }}>
                                <View style={{ flex: 0.2, justifyContent: 'center', alignItems: 'center' }}>
                                    <Image source={require('../../Asset/Icons/obook.png')} style={{ height: hp('3%'), width: hp('3%'), tintColor: color.appGreen }} />
                                </View>
                                <View style={{ flex: 0.8, justifyContent: 'center', }}>
                                    <Text style={{ fontSize: fontSize.verySmall, color: color.lightGray, fontFamily: fontFamily.OpenSansSemiBold, }}>Subject-1 > Chapter-1</Text>
                                </View>
                            </View>
                            <View style={{ flex: 0.35, justifyContent: 'center', flexDirection: 'row', }}>
                                <View style={{ flex: 0.4, justifyContent: 'center', alignItems: 'center' }}>
                                    <Image source={require('../../Asset/Icons/stopwatch.png')} style={{ height: hp('3%'), width: hp('3%'), tintColor: color.appGreen }} />
                                </View>
                                <View style={{ flex: 0.6, justifyContent: 'center' }}>
                                    {/* <Stopwatch laps msecs start={true}
                                        msecs={false}
                                        // reset={this.state.stopwatchReset}
                                        options={options}
                                        getTime={this.getFormattedTime} /> */}
                                    {/* <Timer totalDuration={180015 * 60} sec start={true}
                                        msec={false}
                                        // reset={this.state.timerReset}
                                        options={options}
                                        // handleFinish={handleTimerComplete}
                                        getTime={this.getFormattedTime} /> */}
                                </View>
                            </View>
                        </View>

                        <View style={{ height: hp('6%'), justifyContent: 'center', flexDirection: 'row', marginLeft: wp("2%"), marginRight: wp("2%") }}>


                            {
                                this.state.QuestionIndex != 0 ?
                                    <TouchableOpacity onPress={() => this.OnQuesChange("Previous")} style={{ flex: 0.25, justifyContent: 'center', flexDirection: "row" }}>
                                        <View style={{ flex: 0.5, justifyContent: 'center', alignItems: 'center' }}>
                                            <Image source={require('../../Asset/Icons/arrow_right_left1.png')} style={{ height: hp('4%'), width: hp('4%'), tintColor: color.appGreen }} />
                                        </View>
                                        <View style={{ flex: 0.5, justifyContent: 'center', }}>

                                            <Text style={{ fontSize: fontSize.Small, color: color.appGreen, fontFamily: fontFamily.OpenSansSemiBold, textAlign: 'center' }}>Prev</Text>

                                        </View>
                                    </TouchableOpacity>
                                    :
                                    <View style={{ flex: 0.25, justifyContent: 'center', flexDirection: "row" }}>
                                        <View style={{ flex: 0.5, justifyContent: 'center', alignItems: 'center' }}>
                                            <Image source={require('../../Asset/Icons/arrow_right_left1.png')} style={{ height: hp('4%'), width: hp('4%'), tintColor: color.lightGray }} />
                                        </View>
                                        <View style={{ flex: 0.5, justifyContent: 'center', }}>

                                            <Text style={{ fontSize: fontSize.Small, color: color.lightGray, fontFamily: fontFamily.OpenSansSemiBold, textAlign: 'center' }}>Prev</Text>
                                        </View>
                                    </View>

                            }


                            <View style={{ flex: 0.5, justifyContent: 'center', }}>

                                <Text style={{ fontSize: fontSize.Small, color: color.appRed, fontFamily: fontFamily.OpenSansBold, textAlign: 'center' }}>Q : {this.state.QuestionIndex + 1} - {ChapterQuestions.length}</Text>

                            </View>

                            {this.state.LastQuestioninactive_Index != false ?
                                <View style={{ flex: 0.25, justifyContent: 'center', flexDirection: "row" }}>

                                    <View style={{ flex: 0.5, justifyContent: 'center', }}>

                                        <Text style={{ fontSize: fontSize.Small, color: color.lightGray, fontFamily: fontFamily.OpenSansSemiBold, textAlign: 'center' }}>Next</Text>

                                    </View>
                                    <View style={{ flex: 0.5, justifyContent: 'center', alignItems: 'center' }}>
                                        <Image source={require('../../Asset/Icons/right-arrow-circular-button.png')} style={{ height: hp('4%'), width: hp('4%'), tintColor: color.lightGray }} />
                                    </View>
                                </View>

                                :

                                <TouchableOpacity onPress={() => this.OnQuesChange("Next")} style={{ flex: 0.25, justifyContent: 'center', flexDirection: "row" }}>

                                    <View style={{ flex: 0.5, justifyContent: 'center', }}>

                                        <Text style={{ fontSize: fontSize.Small, color: color.appGreen, fontFamily: fontFamily.OpenSansSemiBold, textAlign: 'center' }}>Next</Text>

                                    </View>

                                    <View style={{ flex: 0.5, justifyContent: 'center', alignItems: 'center' }}>
                                        <Image source={require('../../Asset/Icons/right-arrow-circular-button.png')} style={{ height: hp('4%'), width: hp('4%'), tintColor: color.appGreen }} />
                                    </View>

                                </TouchableOpacity>
                            }



                        </View>
                    </View>
                </View>


                <View style={{ height: wp("2%") }} />

                <View style={{ flex: 0.73, marginLeft: wp('1%'), marginRight: wp('1%'), justifyContent: 'center', }}>
                    <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
                        <ScrollView showsVerticalScrollIndicator={false} >
                            <View style={{ height: wp("1%") }} />


                            <View style={{ flex: 1, justifyContent: 'center', borderRadius: wp("3%"), borderWidth: hp('0.1%'), marginLeft: wp("3%"), marginRight: wp("3%"), paddingBottom: hp('2.5%'), paddingTop: hp('1%'), }}>

                                <View style={{ flex: 1, flexDirection: 'column', justifyContent: 'center', marginLeft: wp('5%'), marginRight: wp('5%'), marginTop: hp('1.5%'), marginBottom: hp('1.5%'), borderRadius: wp('3%'), elevation: wp("0.8%") }}>
                                    <View style={{ flex: 0.5, justifyContent: 'center', paddingBottom: hp('2%'), paddingTop: hp('2%') }}>
                                        <Text style={{ fontSize: fontSize.Small, color: color.black, fontFamily: fontFamily.OpenSansSemiBold, marginLeft: wp('3%'), textAlign: 'justify', marginRight: wp('3%') }}>{ChapterQuestions[this.state.QuestionIndex].QuestionTitle}</Text>
                                    </View>

                                    <TouchableOpacity onPress={() => this.Modelview_Method("Question_ImageModel", ChapterQuestions[this.state.QuestionIndex].QuestionId)} style={{ flex: 0.5, justifyContent: 'center', paddingBottom: hp('2%'), paddingTop: hp('2%'), alignItems: 'center' }}>
                                        <Image source={{ uri: ChapterQuestions[this.state.QuestionIndex].QuestionImage }} style={{ height: hp('20%'), width: hp('30%'), }} />
                                    </TouchableOpacity>
                                </View>
                                <View style={{ height: wp("1.5%") }} />

                                <View style={{ flex: 1, backgroundColor: "#ebebeb", flexDirection: 'column', justifyContent: 'center', marginLeft: wp('5%'), paddingBottom: hp('2%'), paddingTop: hp('2%'), marginRight: wp('5%'), borderRadius: wp('3%'), elevation: wp("0.8%") }}>

                                    {/* <View style={{ flex: 5, flexDirection: 'row', paddingBottom: hp('2%'), paddingTop: hp('2%'), }}> */}


                                    <GridView
                                        style={{ paddingTop: wp("3%"), flex: 1, }}
                                        itemWidth={wp("60%")}
                                        items={ChapterQuestions[this.state.QuestionIndex].QuestionOptions}
                                        enableEmptySections={true}
                                        renderItem={QuestionOptions => (
                                            <View style={{ flex: 1, justifyContent: 'center' }}>

                                                {
                                                    QuestionOptions.OptionValue.startsWith("http://139.59.42.219/superadmin/uploads/") ?

                                                        <View style={{ flex: 1, flexDirection: 'row', justifyContent: 'center', marginTop: wp("2%") }}>
                                                            <View style={{ flex: 0.05 }}></View>

                                                            <TouchableOpacity onPress={() => this.Option_Method(QuestionOptions.OptionId, QuestionOptions)} style={{ flex: 0.1, justifyContent: 'center' }}>
                                                                <Text style={{ fontSize: fontSize.lightMedium, color: QuestionOptions.Status == "false" ? color.black : color.white, fontFamily: fontFamily.OpenSansBold, marginLeft: wp('1%'), textAlign: 'center', backgroundColor: QuestionOptions.Status == "false" ? color.white : color.appGreen, borderColor: color.black, borderWidth: wp("0.2%") }}>{QuestionOptions.Options}</Text>
                                                            </TouchableOpacity>
                                                            <View style={{ flex: 0.05 }}></View>

                                                            <TouchableOpacity onPress={() => this.Modelview_Method("Option_ImageModel", QuestionOptions.OptionId)} style={{ flex: 0.75, justifyContent: 'center' }}>
                                                                <Image source={{ uri: QuestionOptions.OptionValue }} style={{ height: wp('10%'), width: wp('40%'), borderWidth: wp('0.2%'), backgroundColor: color.white, borderColor: color.black, borderWidth: wp("0.2%"), borderRadius: wp("1%"), }} />
                                                            </TouchableOpacity>
                                                            <View style={{ flex: 0.05 }}></View>
                                                        </View>
                                                        :
                                                        <View style={{ flex: 1, flexDirection: 'row', justifyContent: 'center', marginTop: wp("2%") }}>
                                                            <View style={{ flex: 0.05 }}></View>

                                                            <TouchableOpacity onPress={() => this.Option_Method(QuestionOptions.OptionId, QuestionOptions)} style={{ flex: 0.1, justifyContent: 'center' }}>
                                                                <Text style={{ fontSize: fontSize.lightMedium, color: QuestionOptions.Status == "false" ? color.black : color.white, fontFamily: fontFamily.OpenSansBold, marginLeft: wp('1%'), textAlign: 'center', backgroundColor: QuestionOptions.Status == "false" ? color.white : color.appGreen, borderColor: color.black, borderWidth: wp("0.2%") }}>{QuestionOptions.Options}</Text>
                                                            </TouchableOpacity>
                                                            <View style={{ flex: 0.05 }}></View>

                                                            <View style={{ flex: 0.75, justifyContent: 'center' }}>
                                                                {/* <Text style={{ fontSize: fontSize.Small, color: color.black, fontFamily: fontFamily.OpenSansRegular, marginLeft: wp('1%'), textAlign: "justify", backgroundColor: color.white, borderColor: color.black, borderWidth: wp("0.2%") }}>{QuestionOptions.OptionValue}</Text> */}
                                                                <Text style={{ fontSize: fontSize.Small, color: color.black, fontFamily: fontFamily.OpenSansRegular, marginLeft: wp('1%'), textAlign: "justify", }}>{QuestionOptions.OptionValue}</Text>
                                                            </View>

                                                            <View style={{ flex: 0.05 }}></View>


                                                        </View>

                                                }

                                            </View>

                                        )}
                                    />

                                </View>

                            </View>

                        </ScrollView>
                    </TouchableWithoutFeedback>
                </View>



                <View style={{ flex: 0.12, flexDirection: 'row', justifyContent: 'center', alignContent: 'center', backgroundColor: color.white, }}>
                    <View style={{ flex: 0.05 }} />
                    <TouchableOpacity onPress={() => this.Modelview_Method("SubmitModel")} style={{ flex: 0.4, justifyContent: 'center', alignContent: 'center' }}>
                        <View style={{ height: hp('7%'), backgroundColor: color.appGreen, justifyContent: 'center', alignItems: 'center', borderRadius: hp("3.5") }}>
                            <Text style={{ fontSize: fontSize.lightMedium, color: color.white, fontFamily: fontFamily.OpenSansSemiBold }}>Submit Test</Text>
                        </View>
                    </TouchableOpacity>
                    <View style={{ flex: 0.1 }} />
                    <TouchableOpacity onPress={() => this.Modelview_Method("Cancel")} style={{ flex: 0.4, justifyContent: 'center', alignContent: 'center' }}>
                        <View style={{ height: hp('7%'), backgroundColor: color.appRed, justifyContent: 'center', alignItems: 'center', borderRadius: hp("3.5") }}>
                            <Text style={{ fontSize: fontSize.lightMedium, color: color.white, fontFamily: fontFamily.OpenSansSemiBold }}>Cancel Test</Text>
                        </View>
                    </TouchableOpacity>
                    <View style={{ flex: 0.05 }} />
                </View>

                <Modal
                    animationType='fade'
                    transparent={true}
                    visible={this.state.Question_ImageModel}
                    onRequestClose={() => { this.setState({ Question_ImageModel: false }) }}>
                    <TouchableOpacity activeOpacity={0} onPressOut={() => this.onRequestClose()} style={{ flex: 1, alignSelf: 'center', backgroundColor: 'rgba(0,0,0,0.5)' }}>
                        <View style={{ height: hp('100%'), width: wp('100%'), justifyContent: 'center', alignItems: 'center', alignSelf: 'center', backgroundColor: 'transparent' }}>
                            <TouchableWithoutFeedback>
                                <View style={{ height: hp('35%'), width: wp('80%'), backgroundColor: color.white, borderRadius: hp('1.5%') }}>
                                    <View style={{ height: hp('4%'), justifyContent: 'center', alignItems: 'flex-end' }}>
                                        <TouchableOpacity onPressOut={() => this.onRequestClose()} >
                                            <Image source={require('../../Asset/Icons/closesymbol.png')} style={{ height: hp('3%'), width: hp('3%'), marginRight: wp('1%'), tintColor: color.appGreen }} />
                                        </TouchableOpacity>
                                    </View>
                                    <View style={{ justifyContent: 'center', alignItems: 'center' }}>
                                        <Image source={{ uri: QuestionZoomImage }} style={{ height: hp('26%'), width: hp('26%'), }} />
                                    </View>
                                </View>
                            </TouchableWithoutFeedback>
                        </View>
                    </TouchableOpacity>
                </Modal>

                <Modal
                    animationType='fade'
                    transparent={true}
                    visible={this.state.Option_ImageModel}
                    onRequestClose={() => { this.setState({ Option_ImageModel: false }) }}>
                    <TouchableOpacity activeOpacity={0} onPressOut={() => this.onRequestClose()} style={{ flex: 1, alignSelf: 'center', backgroundColor: 'rgba(0,0,0,0.5)' }}>
                        <View style={{ height: hp('100%'), width: wp('100%'), justifyContent: 'center', alignItems: 'center', alignSelf: 'center', backgroundColor: 'transparent' }}>
                            <TouchableWithoutFeedback>
                                <View style={{ height: hp('35%'), width: wp('80%'), backgroundColor: color.white, borderRadius: hp('1.5%') }}>
                                    <View style={{ height: hp('4%'), justifyContent: 'center', alignItems: 'flex-end' }}>
                                        <TouchableOpacity onPressOut={() => this.onRequestClose()} >
                                            <Image source={require('../../Asset/Icons/closesymbol.png')} style={{ height: hp('3%'), width: hp('3%'), marginRight: wp('1%'), tintColor: color.appGreen }} />
                                        </TouchableOpacity>
                                    </View>
                                    <View style={{ justifyContent: 'center', alignItems: 'center' }}>
                                        <Image source={{ uri: answerImageZoom }} style={{ height: hp('26%'), width: hp('26%'), }} />
                                    </View>
                                </View>
                            </TouchableWithoutFeedback>
                        </View>
                    </TouchableOpacity>
                </Modal>

                <Modal
                    animationType='fade'
                    transparent={true}
                    visible={this.state.SubmitModel}
                    onRequestClose={() => { this.setState({ SubmitModel: false }) }}>
                    <TouchableOpacity activeOpacity={0} onPressOut={() => this.onRequestClose()} style={{ flex: 1, alignSelf: 'center', backgroundColor: 'rgba(0,0,0,0.5)' }}>
                        <View style={{ height: hp('100%'), width: wp('100%'), justifyContent: 'center', alignItems: 'center', alignSelf: 'center', backgroundColor: 'transparent' }}>
                            <TouchableWithoutFeedback>
                                <View style={{ height: hp('33%'), width: wp('80%'), backgroundColor: color.white, borderRadius: hp('1.5%'), elevation: 2 }}>
                                    <View style={{ height: hp('7%'), justifyContent: 'center', marginLeft: wp('3%'), marginRight: wp('3%'), borderBottomColor: color.appGreen, borderBottomWidth: hp('0.15%') }}>
                                        <Text style={{ fontSize: fontSize.lightMedium, color: color.black, fontFamily: fontFamily.OpenSansBold, marginLeft: wp('1.5%') }}>Confirmation</Text>
                                    </View>
                                    <View style={{ height: hp('4%'), justifyContent: 'center', marginTop: hp('2%') }}>
                                        <Text style={{ fontSize: fontSize.lightMedium, color: color.black, fontFamily: fontFamily.OpenSansRegular, textAlign: 'center' }}>Do you want to submit?</Text>
                                    </View>
                                    <View style={{ marginLeft: wp('10%'), marginRight: wp('10%'), marginTop: hp('2%') }}>

                                        <Button OnButtonClicked={() => this.props.skipDebounce ? this.props.onConfirmSubmit : this.onConfirmSubmit()} ButtonText='Ok' />

                                        <ButtonRed OnButtonClicked={() => this.props.skipDebounce ? this.props.onRequestClose : this.onRequestClose()} ButtonText='Cancel' />
                                        <View style={{ height: hp('1%') }}></View>
                                    </View>
                                </View>
                            </TouchableWithoutFeedback>
                        </View>
                    </TouchableOpacity>
                </Modal>
                <Modal
                    animationType='fade'
                    transparent={true}
                    visible={this.state.CancelModel}
                    onRequestClose={() => { this.setState({ CancelModel: false }) }}>
                    <TouchableOpacity activeOpacity={0} onPressOut={() => this.onRequestClose()} style={{ flex: 1, alignSelf: 'center', backgroundColor: 'rgba(0,0,0,0.5)' }}>
                        <View style={{ height: hp('100%'), width: wp('100%'), justifyContent: 'center', alignItems: 'center', alignSelf: 'center', backgroundColor: 'transparent' }}>
                            <TouchableWithoutFeedback>
                                <View style={{ height: hp('33%'), width: wp('80%'), backgroundColor: color.white, borderRadius: hp('1.5%'), elevation: 2 }}>
                                    <View style={{ height: hp('7%'), justifyContent: 'center', marginLeft: wp('3%'), marginRight: wp('3%'), borderBottomColor: color.appGreen, borderBottomWidth: hp('0.15%') }}>
                                        <Text style={{ fontSize: fontSize.lightMedium, color: color.black, fontFamily: fontFamily.OpenSansBold, marginLeft: wp('1.5%') }}>Confirmation</Text>
                                    </View>
                                    <View style={{ height: hp('4%'), justifyContent: 'center', marginTop: hp('2%') }}>
                                        <Text style={{ fontSize: fontSize.lightMedium, color: color.black, fontFamily: fontFamily.OpenSansRegular, textAlign: 'center' }}>Do you want to Cancel?</Text>
                                    </View>
                                    <View style={{ marginLeft: wp('10%'), marginRight: wp('10%'), marginTop: hp('2%') }}>

                                        <Button OnButtonClicked={() => this.props.skipDebounce ? this.props.onCancelQues : this.onCancelQues()} ButtonText='Ok' />

                                        <ButtonRed OnButtonClicked={() => this.props.skipDebounce ? this.props.onRequestClose : this.onRequestClose()} ButtonText='Cancel' />
                                        <View style={{ height: hp('1%') }}></View>
                                    </View>
                                </View>
                            </TouchableWithoutFeedback>
                        </View>
                    </TouchableOpacity>
                </Modal>
            </View>
        );
    }
}
const options = {
    container: {
        backgroundColor: '#fff',
        padding: 2,
        borderRadius: 2,
        width: 75,
    },
    text: {
        fontSize: fontSize.Small,
        color: '#000',
    }
};

const mapStateToProps = (state) => {
    return {
        NeetReducer: state.NeetReducer
    };
}

const mapDispatchToProps = (dispatch) => {
    return {
        ImageQuestionAction: (Token, QuestionImageId) => {
            dispatch(ImageQuestionAction(Token, QuestionImageId));
        },
        ImageAnswerAction: (Token, AnswerImageId) => {
            dispatch(ImageAnswerAction(Token, AnswerImageId));
        },
        StartChapterTest_SaveAction: (Token, SubjectId, ChapterId, TestDetailId) => {
            dispatch(StartChapterTest_SaveAction(Token, SubjectId, ChapterId, TestDetailId));
        },
        AllCancelTest_Action: (Token, TestDetailId) => {
            dispatch(AllCancelTest_Action(Token, TestDetailId));
        },
        AllSkipList_Action: (Token, TestDetailId) => {
            dispatch(AllSkipList_Action(Token, TestDetailId));
        },
        
    }
}
export default connect(mapStateToProps, mapDispatchToProps)(ChapterTest_Questions);
