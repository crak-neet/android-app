import React, { Component } from 'react';
import {
    Text,
    View,
    TextInput,
    TouchableOpacity,
    TouchableWithoutFeedback,
    Keyboard,
    Image,
    ScrollView,
    Platform,
    Picker,
} from 'react-native';

import {
    StudentName, MobileNumber, StudentEmail, Password, Address, Pincode, City, District, DistrictId, State
} from './Registration_1';
import {
    FathersName, FathersMobileNumber, FathersEmail, FathersOccupation, MothersName, MothersMobileNumber, MothersEmail, MothersOccupation
} from './Registration_2';
import { fontSize, color, fontFamily } from '../../Asset/NeetStyles/fontsAndColors';
import Button from '../../Asset/Libraries/Button';
import { textInputView, backIcon, title } from '../../Asset/NeetStyles/commonStyles';
import { wp, hp } from '../../Asset/Libraries/ResponsiveScreen';
import { RegistrationAction } from '../../Redux/Actions/RegistrationAction';
import { debounce, Snackbar, FCM, DeviceInfo, connect, DateTimePicker, Moment, ImagePicker, ImageCropper,FileUpload } from '../../Asset/Libraries/NpmList';
import { Header_White } from '../../Asset/Libraries/index'

import { CheckRuntimePermission } from '../../Asset/Utils/index'
var DeviceId = DeviceInfo.getUniqueID();

class Registration_3 extends Component {
    constructor() {
        console.disableYellowBox = true;
        Keyboard.dismiss()
        super();
        this.state = {
            SchoolDetails: '',
            HscYear: '',
            BrotherSisterName: '',
            Class: '',
            BroSisSchoolDetails: '',
            siblings: "0",
            AgentCode: '',
            isToDateTimePickerVisible: false,

            DistrictId: "1234",
            ProfilePic: "",
            DeviceType: "1",
            PushNotificationId: "1",
            DeviceId: "1",

            onClickYes: false,
            onClickNo: true,

        }

        this.backIconPress = debounce(this.backIconPress.bind(this), 1000, {
            leading: true,
            trailing: false,
        });
        this.onRegister = debounce(this.onRegister.bind(this), 1000, {
            leading: true,
            trailing: false,
        });
    }

    componentWillMount() {
        // FCM.getFCMToken().then(PushNotId => {
        //     this.setState({
        //         PushNotificationId: PushNotId
        //     })

        //   //  console.error(PushNotId)

        // })

        if (Platform.OS == "android") {
            this.setState({ DeviceType: "1" , DeviceId :DeviceId})
        }else{
            this.setState({ DeviceType: "2",DeviceId :DeviceId})

        }
    }

    componentDidMount() {

    }
    backIconPress() {
        this.props.navigation.goBack()
    }
    onRegister() {
        const { districtheadId } = this.props.NeetReducer
        // console.error(this.state.ProfilePic)
        if (this.state.SchoolDetails == '') {
            Snackbar.show({
                title: "Enter Your School Details",
                duration: Snackbar.LENGTH_SHORT,
            });
        } else if (this.state.HscYear == '') {
            Snackbar.show({
                title: "Enter Hsc Year",
                duration: Snackbar.LENGTH_SHORT,
            });
        } else if (this.state.onClickYes == true && this.state.BrotherSisterName == '') {
            Snackbar.show({
                title: "Enter Your Bro/Sis Name",
                duration: Snackbar.LENGTH_SHORT,
            });
        } else if (this.state.onClickYes == true && this.state.Class == '') {
            Snackbar.show({
                title: "Enter Your Class",
                duration: Snackbar.LENGTH_SHORT,
            });
        } else if (this.state.onClickYes == true && this.state.BroSisSchoolDetails == '') {
            Snackbar.show({
                title: "Enter Your Siblings school",
                duration: Snackbar.LENGTH_SHORT,
            });
        } else if (this.state.ProfilePic == '') {
            Snackbar.show({
                title: "Set your profile picture",
                duration: Snackbar.LENGTH_SHORT,
            });
        } else {
           // alert('Sucess')
            this.props.RegistrationAction(StudentName, MobileNumber, StudentEmail, Password, Address, Pincode, City, District, districtheadId, State,
                FathersName, FathersMobileNumber, FathersEmail, FathersOccupation, MothersName, MothersMobileNumber, MothersEmail, MothersOccupation,
                this.state.SchoolDetails, this.state.HscYear, this.state.siblings, this.state.BrotherSisterName,
                this.state.Class, this.state.BroSisSchoolDetails, this.state.AgentCode, this.state.ProfilePic,
                this.state.DeviceId, this.state.DeviceType, this.state.PushNotificationId)
        }
    }


    _showToDateTimePicker() { this.setState({ isToDateTimePickerVisible: true }); }

    _hideDateTimePicker = () => this.setState({
        isToDateTimePickerVisible: false,
    });


    _handleToDatePicked = (HscYear) => {
        this.setState({ HscYear: Moment(HscYear).format('YYYY-MM-DD') })
        this.setState({ isToDateTimePickerVisible: false });
    };

    onBroSisConfirm(tabRoute) {
        if (tabRoute == "1") {
            if (this.state.onClickYes == false) {
                this.setState({
                    onClickYes: true,
                    onClickNo: false,
                    siblings: "1",
                })

            } else {
                this.setState({
                    onClickYes: false,
                    onClickNo: true,
                })
            }
        } else {
            if (this.state.onClickYes == true) {
                this.setState({
                    onClickYes: false,
                    onClickNo: true,
                    siblings: "0",
                })
            } else {
                this.setState({
                    onClickYes: true,
                    onClickNo: false,
                })
            }
        }

    }

    UploadImage_Method() {
        if (Platform.OS == "android") {
            CheckRuntimePermission('CAMERA').done((granted) => {
                if (granted == 'true') {
                    const options = {
                        quality: 1.0,
                        maxWidth: 500,
                        maxHeight: 500,
                        storageOptions: {
                            skipBackup: true
                        }
                    };
                    ImagePicker.showImagePicker(options, (response) => {

                        this.setState({ Status: true, });
                        if (response.didCancel) {

                        } else if (response.error) {
                            // alert('2')
                            //console.log('ImagePicker Error: ', response.error);
                        } else if (response.customButton) {
                            // alert('3')
                            //console.log('User tapped custom button: ', response.customButton);
                        } else {
                            ImageCropper.openCropper({
                                path: response.uri,
                                compressImageQuality: 1,
                                cropperCircleOverlay: false,
                                compressImageMaxWidth: 300,
                                compressImageMaxHeight: 300,
                                cropping: true,
                                width: 300,
                                height: 300,
                                includeExif: true,

                            }).then(image => {
                                // console.error(image)
                                var sizeInMB = (((image.size) / (1024)) / 1024).toFixed(0);
                                var Crop_Image = image.cropRect

                                if (sizeInMB > 10) {
                                    Snackbar.show({
                                        title: 'Image size should be lessthen 10 MB',
                                        duration: Snackbar.LENGTH_SHORT,
                                    });
                                } else if (Crop_Image.width < 200 && Crop_Image.height < 200) {
                                    Snackbar.show({
                                        title: 'Image Resolution should be Greaterthen 200 * 200',
                                        duration: Snackbar.LENGTH_SHORT,
                                    });
                                } else {

                                    var _this = this;
                                    _this.setState({
                                        filename: image.path,
                                        filepath: image.path,
                                        filetype: response.mime,
                                    });

                                    var obj = {
                                        uploadUrl: "http://139.59.42.219/api/user/imagefileupload",
                                        method: 'POST', // default 'POST',support 'POST' and 'PUT' 
                                        headers: {
                                            'Accept': 'application/json',
                                        },
                                        fields: {
                                            data: _this.state.filepath
                                        },
                                        files: [
                                            {
                                                name: 'data', // optional, if none then `filename` is used instead 
                                                filename: _this.state.filename, // require, file name 
                                                filepath: _this.state.filepath, // require, file absoluete path 
                                                filetype: _this.state.filetype,
                                            },
                                        ]
                                    };
                                    // console.error(obj)

                                    FileUpload.upload(obj, function (err, result) {

                                        try {
                                            // alert()
                                            var jsonresponse = JSON.parse(result.data);
                                            if (jsonresponse.ResultStatus == 'true') {
                                                Snackbar.show({
                                                    title: 'Successfully Uploaded',
                                                    duration: Snackbar.LENGTH_SHORT,
                                                });

                                            }
                                            else {
                                                Snackbar.show({
                                                    title: jsonresponse.Message,
                                                    duration: Snackbar.LENGTH_SHORT,
                                                });
                                            }

                                        }
                                        catch (e) {

                                        }
                                    })
                                }
                            });
                        }
                    });
                } else {
                    Snackbar.show({
                        title: 'Camera/Video Permission not granted',
                        duration: Snackbar.LENGTH_SHORT,
                    });
                }
            });
        } else {
            ImagePicker.showImagePicker((response) => {
                if (response.didCancel) {
                } else if (response.error) {
                } else if (response.customButton) {
                } else {

                    ImageCropper.openCropper({
                        path: response.uri,
                        compressImageQuality: 1,
                        cropperCircleOverlay: false,
                        compressImageMaxWidth: 300,
                        compressImageMaxHeight: 300,
                        cropping: true,
                        width: 300,
                        height: 300,
                        includeExif: true,

                    }).then(image => {

                        var sizeInMB = (((image.size) / (1024)) / 1024).toFixed(0);
                        var Crop_Image = image.cropRect

                        if (sizeInMB > 10) {
                            Snackbar.show({
                                title: 'Image size should be lessthen 10 MB',
                                duration: Snackbar.LENGTH_SHORT,
                            });
                        } else if (Crop_Image.width < 200 && Crop_Image.height < 200) {
                            Snackbar.show({
                                title: 'Image Resolution should be Greaterthen 200 * 200',
                                duration: Snackbar.LENGTH_SHORT,
                            });
                        } else {
                            var objfileName = !(image.path) ? 'SAMPLE.PNG' : image.path;

                            var _this = this;

                            _this.setState({
                                filename: image.path,
                                filepath: image.path,
                                filetype: response.type,
                            });
                            var obj = {
                                uploadUrl: "http://139.59.42.219/api/user/imagefileupload",
                                method: 'POST', // default 'POST',support 'POST' and 'PUT' 
                                headers: {
                                    'Accept': 'application/json',
                                },
                                fields: {

                                },
                                files: [
                                    {
                                        name: 'data', // optional, if none then `filename` is used instead 
                                        filename: objfileName, // require, file name 
                                        filepath: _this.state.filepath, // require, file absoluete path 
                                        filetype: _this.state.filetype,
                                    },
                                ]
                            };

                            FileUpload.upload(obj, function (err, result) {
                                try {
                                    var jsonresponse = JSON.parse(result.data);
                                    if (jsonresponse.ResultStatus == 'true') {
                                       
                                        Snackbar.show({
                                            title: 'Successfully Uploaded',
                                            duration: Snackbar.LENGTH_SHORT,
                                        });
                                     
                                       _this.setState({ ProfilePic:jsonresponse.FileName})
                                       
                                    }
                                    else {
                                        Snackbar.show({
                                            title: jsonresponse.Message,
                                            duration: Snackbar.LENGTH_SHORT,
                                        });
                                    }
                                }
                                catch (e) {

                                    Snackbar.show({
                                        title: 'Plz try Again Later',
                                        duration: Snackbar.LENGTH_SHORT,
                                    });
                                }
                            })
                        }
                    });
                }
            });
        }
    }


    render() {

        // var spinner = false;
        // if (isFetchingLogin == true) {
        //     spinner = <Spinner visibility={true} />
        // } else {
        //     spinner = false
        // }
        return (
            <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
                <View style={{ flex: 1, backgroundColor: color.white, }}>
                    <Header_White onPressLeftIcon={() => this.backIconPress()} HeaderText='Registration' />


                    <View style={{ height: hp('7%'), justifyContent: 'center' }}>
                        <View style={{ justifyContent: 'center', alignItems: 'center', flexDirection: 'row', marginLeft: wp('18%'), marginRight: wp('18%') }}>
                            <View style={{ height: wp('8%'), width: wp('8%'), borderRadius: wp('8%'), backgroundColor: color.appRed, borderColor: color.appRed, justifyContent: 'center', alignItems: 'center' }}>
                                <Text style={{ fontSize: fontSize.Small, color: color.white, fontFamily: fontFamily.OpenSansSemiBold }}>1</Text>
                            </View>

                            <View style={{ height: hp('0.3'), width: wp('13%'), backgroundColor: color.appRed }} />

                            <View style={{ height: wp('8%'), width: wp('8%'), borderRadius: wp('8%'), backgroundColor: color.appRed, borderColor: color.appRed, borderWidth: wp('0.6%'), justifyContent: 'center', alignItems: 'center' }}>
                                <Text style={{ fontSize: fontSize.Small, color: color.white, fontFamily: fontFamily.OpenSansSemiBold }}>2</Text>
                            </View>

                            <View style={{ height: hp('0.3'), width: wp('13%'), backgroundColor: color.appRed }} />

                            <View style={{ height: wp('8%'), width: wp('8%'), borderRadius: wp('8%'), backgroundColor: color.appRed, borderColor: color.appRed, borderWidth: wp('0.6%'), justifyContent: 'center', alignItems: 'center' }}>
                                <Text style={{ fontSize: fontSize.Small, color: color.white, fontFamily: fontFamily.OpenSansRegular }}>3</Text>
                            </View>
                        </View>
                    </View>

                    <View style={{ height: hp('6%'), justifyContent: 'center', marginTop: hp('1%') }}>
                        <Text style={{ color: color.appRed, fontSize: fontSize.Small, fontFamily: fontFamily.OpenSansRegular, textAlign: 'center' }}>School Details</Text>
                    </View>

                    {/* <TouchableWithoutFeedback onPress={Keyboard.dismiss}> */}
                    <ScrollView showsVerticalScrollIndicator={false}>

                        <View style={{ height: hp('7%'), flexDirection: 'row', borderRadius: 30, marginLeft: wp('10%'), marginRight: wp('10%'), borderColor: color.lightGray, borderWidth: hp('0.2%'), marginTop: hp('2%') }}>
                            <View style={{ flex: 2, justifyContent: 'center', alignItems: 'center' }}>
                                <Image source={require('../../Asset/Icons/university.png')} style={textInputView.textInputIconStyle} />
                            </View>
                            <View style={{ flex: 8, justifyContent: 'center' }}>
                                <TextInput
                                    placeholder="School Name & Address"
                                    ref='SchoolDetails'
                                    returnKeyType='next'
                                    underlineColorAndroid='transparent'
                                    style={{ fontSize: fontSize.lightMedium, fontFamily: fontFamily.OpenSansRegular, }}
                                    onChangeText={(SchoolDetails) => this.setState({ SchoolDetails })}
                                // onSubmitEditing={() => this.refs.HscYear.focus()}
                                />
                            </View>
                        </View>

                        <View style={{ height: hp('7%'), flexDirection: 'row', borderRadius: 30, marginLeft: wp('10%'), marginRight: wp('10%'), borderColor: color.lightGray, borderWidth: hp('0.2%'), marginTop: hp('2%') }}>
                            <View style={{ flex: 2, justifyContent: 'center', alignItems: 'center' }}>
                                <Image source={require('../../Asset/Icons/smartphone.png')} style={textInputView.textInputIconStyle} />
                            </View>
                            {/* <TouchableOpacity onPress={() => this._showToDateTimePicker()}> */}
                            <TouchableOpacity onPress={() => this._showToDateTimePicker()} style={{ flex: 8, justifyContent: 'center' }}>
                                <Text style={{ color: this.state.HscYear == "" ? color.lightGray : color.black, fontSize: fontSize.Small, fontFamily: fontFamily.OpenSansRegular, backgroundColor: 'transparent', }}>{this.state.HscYear == "" ? "HSC Year" : this.state.HscYear}</Text>
                                <DateTimePicker
                                    //for one day -> 86400000 , 6570 -> 18 yrs
                                    // maximumDate={new Date(new Date().getTime() - (86400000 * 6575))}
                                    //for one day -> 86400000 , 36525 -> 100 yrs
                                    // minimumDate={new Date(new Date().getTime() - (86400000 * 36525))}
                                    isVisible={this.state.isToDateTimePickerVisible}
                                    onConfirm={this._handleToDatePicked}
                                    onCancel={this._hideDateTimePicker}
                                />

                            </TouchableOpacity>
                        </View>


                        <View style={{ height: hp('8%'), marginLeft: wp('10%'), marginRight: wp('10%'), marginTop: hp('2%') }}>
                            <View style={{ height: hp('4%'), justifyContent: 'center' }}>
                                <Text style={{ fontSize: fontSize.Small, color: color.lightGray, fontFamily: fontFamily.OpenSansRegular, textAlign: 'center' }}>Do You Have Younger Brother/Sister</Text>
                            </View>
                            <View style={{ height: hp('4%'), flexDirection: 'row', justifyContent: 'center', marginLeft: wp('15%'), marginRight: wp('15%'), }}>
                                <TouchableOpacity onPress={() => this.onBroSisConfirm("1")} style={{ flex: 2, justifyContent: 'center' }}>
                                    {this.state.onClickYes == true ?
                                        <Image source={require('../../Asset/Icons/dot-and-circle.png')} style={{ height: wp('4.5%'), width: wp('4.5%'), tintColor: color.black }} />
                                        :
                                        <Image source={require('../../Asset/Icons/circle-shape-outline.png')} style={{ height: wp('4.5%'), width: wp('4.5%'), tintColor: color.lightGray }} />
                                    }

                                </TouchableOpacity>
                                <View style={{ flex: 4, justifyContent: 'center' }}>
                                    <Text style={{ fontSize: fontSize.Small, color: this.state.onClickYes == false ? color.lightGray : color.black, fontFamily: fontFamily.OpenSansRegular, marginLeft: wp('1%') }}>Yes</Text>
                                </View>
                                <TouchableOpacity onPress={() => this.onBroSisConfirm("0")} style={{ flex: 2, justifyContent: 'center' }}>
                                    {this.state.onClickNo == true ?
                                        <Image source={require('../../Asset/Icons/dot-and-circle.png')} style={{ height: wp('4.5%'), width: wp('4.5%'), tintColor: color.black }} />
                                        :
                                        <Image source={require('../../Asset/Icons/circle-shape-outline.png')} style={{ height: wp('4.5%'), width: wp('4.5%'), tintColor: color.lightGray }} />
                                    }
                                </TouchableOpacity>
                                <View style={{ flex: 4, justifyContent: 'center' }}>
                                    <Text style={{ fontSize: fontSize.Small, color: this.state.onClickNo == false ? color.lightGray : color.black, fontFamily: fontFamily.OpenSansRegular, marginLeft: wp('1%') }}>No</Text>
                                </View>
                            </View>
                        </View>
                        {this.state.onClickNo == false ?
                            <View>
                                <View style={{ height: hp('7%'), flexDirection: 'row', borderRadius: 30, marginLeft: wp('10%'), marginRight: wp('10%'), borderColor: color.lightGray, borderWidth: hp('0.2%'), marginTop: hp('2%') }}>
                                    <View style={{ flex: 2, justifyContent: 'center', alignItems: 'center' }}>
                                        <Image source={require('../../Asset/Icons/children.png')} style={textInputView.textInputIconStyle} />
                                    </View>
                                    <View style={{ flex: 8, justifyContent: 'center' }}>
                                        <TextInput
                                            placeholder="Brother/Sister Name"
                                            ref='BrotherSisterName'
                                            returnKeyType='next'
                                            underlineColorAndroid='transparent'
                                            style={{ fontSize: fontSize.lightMedium, fontFamily: fontFamily.OpenSansRegular, }}
                                            onChangeText={(BrotherSisterName) => this.setState({ BrotherSisterName })}
                                            onSubmitEditing={() => this.refs.Class.focus()}
                                        />
                                    </View>
                                </View>

                                <View style={{ height: hp('7%'), flexDirection: 'row', borderRadius: 30, marginLeft: wp('10%'), marginRight: wp('10%'), borderColor: color.lightGray, borderWidth: hp('0.2%'), marginTop: hp('2%') }}>
                                    <View style={{ flex: 2, justifyContent: 'center', alignItems: 'center' }}>
                                        <Image source={require('../../Asset/Icons/personal-card.png')} style={textInputView.textInputIconStyle} />
                                    </View>
                                    <View style={{ flex: 8, justifyContent: 'center' }}>
                                        <TextInput
                                            placeholder="Class"
                                            ref='Class'
                                            returnKeyType='next'
                                            underlineColorAndroid='transparent'
                                            style={{ fontSize: fontSize.lightMedium, fontFamily: fontFamily.OpenSansRegular, }}
                                            onChangeText={(Class) => this.setState({ Class })}
                                            onSubmitEditing={() => this.refs.BroSisSchoolDetails.focus()}
                                        />
                                    </View>
                                </View>

                                <View style={{ height: hp('7%'), flexDirection: 'row', borderRadius: 30, marginLeft: wp('10%'), marginRight: wp('10%'), borderColor: color.lightGray, borderWidth: hp('0.2%'), marginTop: hp('2%') }}>
                                    <View style={{ flex: 2, justifyContent: 'center', alignItems: 'center' }}>
                                        <Image source={require('../../Asset/Icons/university.png')} style={textInputView.textInputIconStyle} />
                                    </View>
                                    <View style={{ flex: 8, justifyContent: 'center' }}>
                                        <TextInput
                                            placeholder="School Name & Address"
                                            ref='BroSisSchoolDetails'
                                            returnKeyType='next'
                                            underlineColorAndroid='transparent'
                                            style={{ fontSize: fontSize.lightMedium, fontFamily: fontFamily.OpenSansRegular, }}
                                            onChangeText={(BroSisSchoolDetails) => this.setState({ BroSisSchoolDetails })}
                                            onSubmitEditing={() => this.refs.AgentCode.focus()}
                                        />
                                    </View>
                                </View>


                                <View style={{ height: hp('7%'), flexDirection: 'row', borderRadius: 30, marginLeft: wp('10%'), marginRight: wp('10%'), borderColor: color.lightGray, borderWidth: hp('0.2%'), marginTop: hp('2%') }}>
                                    <View style={{ flex: 2, justifyContent: 'center', alignItems: 'center' }}>
                                        <Image source={require('../../Asset/Icons/employee.png')} style={textInputView.textInputIconStyle} />
                                    </View>
                                    <View style={{ flex: 8, justifyContent: 'center' }}>
                                        <TextInput
                                            placeholder="Agent Code"
                                            ref='AgentCode'
                                            returnKeyType='next'
                                            underlineColorAndroid='transparent'
                                            style={{ fontSize: fontSize.lightMedium, fontFamily: fontFamily.OpenSansRegular, }}
                                            onChangeText={(AgentCode) => this.setState({ AgentCode })}
                                        // onSubmitEditing={() => this.refs.MothersEmail.focus()}
                                        />
                                    </View>
                                </View>
                                <View style={{ height: hp('1%') }}></View>
                            </View>
                            : null}
                        {this.state.onClickNo == false ?

                            <View style={{ height: hp('13%'), justifyContent: 'center', marginTop: hp('1%'), alignItems: 'center' }}>
                                <TouchableOpacity onPress={() => this.UploadImage_Method()}>
                                    <Image source={require('../../Asset/Icons/cameraadd.png')} style={{ height: wp('25%'), width: wp('25%'), tintColor: color.lightGray }} />
                                </TouchableOpacity>
                            </View>
                            :
                            <View style={{ height: hp('13%'), justifyContent: 'center', marginTop: hp('4%'), marginBottom: hp('4%'), alignItems: 'center' }}>
                                <TouchableOpacity onPress={() => this.UploadImage_Method()}>
                                    <Image source={require('../../Asset/Icons/cameraadd.png')} style={{ height: wp('40%'), width: wp('40%'), tintColor: color.lightGray }} />
                                </TouchableOpacity>
                            </View>
                        }

                        <View style={{ height: hp('3%') }}></View>

                        <Button OnButtonClicked={() => this.props.skipDebounce ? this.props.onRegister : this.onRegister()} ButtonText='Register' />

                        <View style={{ height: hp('3%') }}></View>
                    </ScrollView>
                    {/* </TouchableWithoutFeedback> */}
                </View>
            </TouchableWithoutFeedback>
        );
    }
}

const mapStateToProps = (state) => {
    return {
        NeetReducer: state.NeetReducer
    };
}

const mapDispatchToProps = (dispatch) => {
    return {
        RegistrationAction: (StudentName, MobileNumber, StudentEmail, Password, Address, Pincode, City, District, DistrictId, State,
            FathersName, FathersMobileNumber, FathersEmail, FathersOccupation, MothersName, MothersMobileNumber, MothersEmail, MothersOccupation,
            SchoolDetails, HscYear, siblings, BrotherSisterName, Class, BroSisSchoolDetails, AgentCode, ProfilePic,
            DeviceId, DeviceType, PushNotificationId) => {
            dispatch(RegistrationAction(StudentName, MobileNumber, StudentEmail, Password, Address, Pincode, City, District, DistrictId, State,
                FathersName, FathersMobileNumber, FathersEmail, FathersOccupation, MothersName, MothersMobileNumber, MothersEmail, MothersOccupation,
                SchoolDetails, HscYear, siblings, BrotherSisterName, Class, BroSisSchoolDetails, AgentCode, ProfilePic,
                DeviceId, DeviceType, PushNotificationId));
        },
    }
}
export default connect(mapStateToProps, mapDispatchToProps)(Registration_3);